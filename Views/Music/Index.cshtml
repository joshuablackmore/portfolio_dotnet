@model portfolio_dotnet.ViewModels.Music.MusicViewModel;

@{
    ViewData["Title"] = "Music";
}

<section>
      <header>
        <h1 class="text-md italic">@Model.PageTitle</h1>
        <hr class="mt-3 w-56 border-t border-gray-200 opacity-60 mx-auto" />
    </header>
@foreach (var discographySection in Model.Discography)
{
    <div class="py-4">
        <h2 class="text-lg font-bold mb-6">@discographySection.Heading</h2>

        @{
            var layoutClass = discographySection.Albums.Count > 1 ? "grid md:grid-cols-2 gap-6 place-items-center md:items-start"
        : "flex justify-center";
        }
        <div class="@layoutClass">
            @foreach (var album in discographySection.Albums)
            {
                <div class="card bg-base-100 shadow-md border border-base-200 overflow-hidden max-w-md w-full">
                    @if (!string.IsNullOrEmpty(album.Artwork))
                    {
                        <figure>
                            <img src="@album.Artwork" alt="@album.Title cover" class="w-full h-auto object-cover" />
                        </figure>
                    }
                    <div class="card-body space-y-2">
                        <div  class="flex justify-between items-center">
                            <h3 class="card-title text-lg font-semibold">@album.Title</h3>
                            <span class="text-sm text-gray-500">@album.Year</span>
                        </div>

                        <p class="text-sm">Genre: @album.Genre</p>

                        @if (!string.IsNullOrEmpty(album.Role))
                        {
                          <p class="text-sm">Role: <span class="italic">@album.Role</span></p>  
                        }

                        <p class="text-base text-gray-600">@album.Description</p>

                        @if (album.Links != null && album.Links.Count > 0)
                        {
                            <div class="flex flex-wrap gap-2 mt-3">
                                @foreach (var link in album.Links)
                                {
                                        var platform = link.Key.ToLowerInvariant();
                                        var colourClass = platform switch
                                        {
                                            "spotify" => "bg-green-600 text-white hover:bg-green-700",
                                            "bandcamp" => "bg-blue-600 text-white hover:bg-blue-700",
                                            _ => "badge-outline hover:badge-primrary"
                                        };
                                        <a href="@link.Value" target="_blank" class="badge @colourClass">
                                        @link.Key.Substring(0, 1).ToUpper()@link.Key.Substring(1)
                                    </a>
                                }
                            </div>
                        }

                    </div>
                </div>
            }
        </div>
    </div>
}
</section>